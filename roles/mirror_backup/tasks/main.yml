---

- name: Assert that all required inputs have been provided.
  ansible.builtin.assert:
    that:
      - email_host is not none
      - email_port is not none
      - email_username is not none
      - email_password is not none

- name: Install msmtp, git, cron and rsync.
  ansible.builtin.package:
    name:
      - msmtp
      - git
      - cron
      - rsync
    update_cache: true

- name: Add msmtp email global config.
  no_log: true
  ansible.builtin.blockinfile:
    path: /etc/msmtprc
    create: true
    owner: root
    group: root
    mode: '0644'
    block: |
      account default
      tls on
      tls_starttls off
      tls_certcheck off
      auth login
      host "{{ email_host }}"
      port "{{ email_port }}"
      user "{{ email_username }}"
      from "{{ email_username }}"
      password "{{ email_password }}"

- name: Create backup destination directory if it does not exist
  ansible.builtin.file:
    path: "{{ mirror_backup_destination }}"
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Create scripts directory if it does not exist.
  ansible.builtin.file:
    path: "{{ tesseract_files_path }}/scripts"
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Git checkout scripts to scripts directory.
  ansible.builtin.git:
    repo: "{{ tesseract_scripts_repo }}"
    dest: "{{ tesseract_files_path }}/scripts"
    version: main
    force: true

- name: Write .env file.
  ansible.builtin.blockinfile:
    path: "{{ tesseract_files_path }}/scripts/.env"
    marker: "# {mark} mirror_backup ANSIBLE MANAGED BLOCK"
    create: true
    owner: root
    group: root
    mode: '0644'
    block: |
      MIRROR_BACKUP_DESTINATION="{{ mirror_backup_destination }}"
      LOG_FILE="{{ tesseract_log_file }}"
      EMAIL_USERNAME="{{ email_username }}"

- name: Add cron job for mirror backup script.
  ansible.builtin.cron:
    name: "Mirror backup for {{ item.path | basename }}."
    minute: "{{ mirror_backup_minute }}"
    hour: "{{ mirror_backup_hour }}"
    day: "{{ mirror_backup_day }}"
    job: >
      bash {{ tesseract_files_path }}/scripts/mirror_backup.sh {{ item.path }}
      {{ '-d' if not item.stop_docker | default(false) }}
  when: mirror_backup_paths | length > 0
  loop: "{{ mirror_backup_paths }}"
